package com.union_find;

//第二版本的并查集
public class QuickFind2 implements UF {

//  parent[i] 表示的是第i个节点的父亲节点是谁
    private int[] parent;

    public QuickFind2(int size){
        parent = new int[size];
        for (int i = 0; i < parent.length; i++) {
            parent[i] = i;
        }
    }

    @Override
    public int getSize() {
        return parent.length;
    }

//    查找过程，查找元素p 所对应的集合编号 O(h)的时间复杂度，h为树的高度
    private int find(int p){
        if (p < 0 || p >= parent.length){
            throw new IllegalArgumentException("p is out of bound...");
        }
        while (p != parent[p]){
            p = parent[p];
        }
        return p;
    }

//    查看元素p 和元素 q是不是属于同样的一个集合
    @Override
    public boolean isConnected(int p, int q) {
        return find(p) == find(q);
    }

//    合并元素p 和元素 q所在的集合，O(h)的时间复杂度， h为树的高度
    @Override
    public void unionElements(int p, int q) {
        int pRoot = find(p);
        int qRoot = find(q);

        if (pRoot == qRoot){
            return;
        }

        parent[pRoot] = qRoot;
    }
}
